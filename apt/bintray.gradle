//apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
//http://stackoverflow.com/questions/43291448/artifact-or-version-defined-in-the-pom-file-do-not-match
group = rootProject.ext.FCMpomUtilsGroupId
version = rootProject.ext.FCMversionName
def pomArtifactId = rootProject.ext.FCMpomUtilsArtifactId

tasks.withType(Javadoc).all { enabled = false }

//task javadoc(type: Javadoc) {
//    options.encoding = "UTF-8"
//    options.charSet = 'UTF-8'
//    source = android.sourceSets.main.java.srcDirs
//    println android.getBootClasspath()
//    println File.pathSeparator
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    failOnError false
//}

if (project.hasProperty("android")) { // Android libraries

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        baseName = pomArtifactId
        from android.sourceSets.main.java.srcDirs
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        baseName = pomArtifactId
        from javadoc.destinationDir
    }

} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    tasks.withType(Compile) { //Here is pure java
        options.encoding = 'UTF-8'
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

def pomConfig = {
//    inceptionYear '2017'
//    packaging 'aar'
//    name pomArtifactId
//    description 'FCM Base Library'
//    url rootProject.ext.scmUrl
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    developers {
        developer {
            id 'lzyzsd'
            name 'hi大头鬼hi'
            email 'bruceinpeking@gmail.com'
        }
    }
    scm {
        connection rootProject.ext.scmConnectionUrl
        developerConnection rootProject.ext.scmConnectionUrl
        url rootProject.ext.scmUrl
    }
}

//publishing {
//    publications {
//        Production(MavenPublication) {
////            from components.android
////            artifact("$buildDir/outputs/aar/$pom_artifact-release.aar")
//            artifact("$buildDir/outputs/aar/$pomArtifactId-release.aar")
////            groupId
////            artifactId "$pom_artifact"
//            groupId 'fcm.android.play.google.quickstart'
//            artifactId 'quick_fcm'
//            version this.version
//
//            pom.withXml {
////                def root = asNode()
//
//                def dependenciesNode = asNode().appendNode('dependencies')
////                root.appendNode('description', 'Your description of the lib')
////                root.appendNode('name', 'Your name of the lib')
////                root.appendNode('url', 'https://site_for_lib.tld')
////                root.children().last() + pomConfig
//                dependenciesNode.appendNode('description', 'Your description of the lib')
//                dependenciesNode.appendNode('name', 'Your name of the lib')
//                dependenciesNode.appendNode('url', 'https://site_for_lib.tld')
//                dependenciesNode.children().last() + pomConfig
//                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
////                configurations.implementation.allDependencies.each {
////                    // Ensure dependencies such as fileTree are not included in the pom.
////                    if (it.name != 'unspecified') {
////                        def dependencyNode = dependenciesNode.appendNode('dependency')
////                        dependencyNode.appendNode('groupId', it.group)
////                        dependencyNode.appendNode('artifactId', it.name)
////                        dependencyNode.appendNode('version', it.version)
////                    }
////                }
//            }
//        }
//    }
//}


// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = rootProject.ext.mainrepo
        name = pomArtifactId
//        userOrg = properties.getProperty("bintray.org")
//        desc = libraryDescription
        websiteUrl = rootProject.ext.scmUrl
        vcsUrl = rootProject.ext.scmConnectionUrl
        licenses = ["Apache-2.0"]
        publish = true
        publicDownloadNumbers = true
        version {
//            desc = libraryDescription
//            gpg {
//                sign = true //Determines whether to GPG sign the files. The default is false
//                passphrase = properties.getProperty("bintray.gpg.password")
//                name = rootProject.ext.versionName
//                //Optional. The passphrase for GPG signing'
//            }
        }
    }
}

// 构件文件信息配置
install {
    repositories.mavenInstaller {
        pom.project {
            groupId this.group
            artifactId pomArtifactId
            version this.version
            packaging 'aar'

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
        }
    }
}
